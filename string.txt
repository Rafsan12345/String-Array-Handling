#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "Hello, welcome to C programming.";
    char *sub;

    sub = strstr(str, "welcome");

    if (sub != NULL) {
        printf("Substring found: %s\n", sub);
    } else {
        printf("Substring not found.\n");
    }

    return 0;
}
.............................................................

#include <stdio.h>
#include <string.h>

int main() {
    char str[20];

    // Set the first 10 bytes of str to 'A'
    memset(str, 'A', 10);
    
    // Set the remaining bytes to '0'
    memset(str + 10, '0', 10);

    printf("String after memset: %s\n", str);

    return 0;
}
\


#include <stdio.h>
#include <string.h>

int main() {
    char arr[10];
    memset(arr, 0, sizeof(arr)); // рж╕ржм ржмрж╛ржЗржЯ 0 ржХрж░рж╛
    return 0;
}

.........................................



#include <stdio.h>

int main() {
    char str[] = "LED:45 45 EXTRACTION";
    int ledValue, extraValue;

    // Parse the string using sscanf to extract integers
    sscanf(str, "LED:%d %d", &ledValue, &extraValue);

    printf("LED Value: %d\n", ledValue);
    printf("Extra Value: %d\n", extraValue);

    return 0;
}
..........................................................
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cJSON.h"  // Include the cJSON library

int main() {
    // JSON string
    const char *json_string = "{\"LED\": 45, \"extra\": 45, \"message\": \"EXTRACTION\"}";

    // Parse the JSON string
    cJSON *json = cJSON_Parse(json_string);

    if (json == NULL) {
        printf("Error parsing JSON\n");
        return 1;
    }

    // Extract values from JSON
    cJSON *led_value = cJSON_GetObjectItemCaseSensitive(json, "LED");
    cJSON *extra_value = cJSON_GetObjectItemCaseSensitive(json, "extra");
    cJSON *message = cJSON_GetObjectItemCaseSensitive(json, "message");

    // Print the values
    if (cJSON_IsNumber(led_value)) {
        printf("LED Value: %d\n", led_value->valueint);
    }
    
    if (cJSON_IsNumber(extra_value)) {
        printf("Extra Value: %d\n", extra_value->valueint);
    }

    if (cJSON_IsString(message) && (message->valuestring != NULL)) {
        printf("Message: %s\n", message->valuestring);
    }

    // Clean up
    cJSON_Delete(json);

    return 0;
}

..................................................

#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "Hello, welcome to C programming.01784032597";
    char *sub;

    sub = strstr(str, "017");

    if (sub != NULL) {
        printf("Substring found: %s\n", sub);
    } else {
        printf("Substring not found.\n");
    }

    return 0;
}
................................................


ЁЯФд рж╕рзНржЯрзНрж░рж┐ржВ ржХржкрж┐ ржУ ржпрзЛржЧ (Copy & Concatenation)
ржлрж╛ржВрж╢ржи	ржХрж╛ржЬ
strcpy(dest, src)	src рж╕рзНржЯрзНрж░рж┐ржВржЯрж┐ dest ржП ржХржкрж┐ ржХрж░рзЗ
strncpy(dest, src, n)	src ржПрж░ ржкрзНрж░ржержо n ржЯрж┐ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ dest ржП ржХржкрж┐ ржХрж░рзЗ
strcat(dest, src)	src ржХрзЗ dest ржПрж░ рж╢рзЗрж╖рзЗ ржпрзЛржЧ ржХрж░рзЗ
strncat(dest, src, n)	src ржПрж░ ржкрзНрж░ржержо n ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ dest ржПрж░ рж╢рзЗрж╖рзЗ ржпрзЛржЧ ржХрж░рзЗ

ЁЯУП рж╕рзНржЯрзНрж░рж┐ржВ ржжрзИрж░рзНржШрзНржп (Length)
ржлрж╛ржВрж╢ржи	ржХрж╛ржЬ
strlen(str)	рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗрж░ ржжрзИрж░рзНржШрзНржп (null-terminator ржЫрж╛рзЬрж╛) рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ

ЁЯФН рж╕рзНржЯрзНрж░рж┐ржВ рждрзБрж▓ржирж╛ (Comparison)
ржлрж╛ржВрж╢ржи	ржХрж╛ржЬ
strcmp(str1, str2)	ржжрзБржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ ржкрзБрж░рзЛржкрзБрж░рж┐ ржорж┐рж▓ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржжрзЗржЦрзЗ (case-sensitive)
strncmp(str1, str2, n)	ржкрзНрж░ржержо n ржЯрж┐ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рждрзБрж▓ржирж╛ ржХрж░рзЗ
strcasecmp(str1, str2)	ржжрзБржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ рждрзБрж▓ржирж╛ ржХрж░рзЗ (case-insensitive, ржХрж┐ржЫрзБ рж╕рж┐рж╕рзНржЯрзЗржорзЗ)

ЁЯФО рж╕рзНржЯрзНрж░рж┐ржВ ржЕржирзБрж╕ржирзНржзрж╛ржи (Searching)
ржлрж╛ржВрж╢ржи	ржХрж╛ржЬ
strchr(str, ch)	рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗ ржХрзЛржирзЛ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗ
strrchr(str, ch)	ржбрж╛ржи ржжрж┐ржХ ржерзЗржХрзЗ ржкрзНрж░ржержо ржорж┐рж▓ ржкрж╛ржУрзЯрж╛ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржЦрзБржБржЬрзЗ
strstr(str, substr)	рж╕рж╛ржм-рж╕рзНржЯрзНрж░рж┐ржВ ржЦрзБржБржЬрзЗ ржПржмржВ рж╕рзЗржЗ ржкржЬрж┐рж╢ржи ржерзЗржХрзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
strpbrk(str, chars)	рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗ ржпрзЗржХрзЛржирзЛ ржПржХ ржмрж╛ ржПржХрж╛ржзрж┐ржХ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржЦрзБржБржЬрзЗ

ЁЯз╣ рж╕рзНржЯрзНрж░рж┐ржВ рж╕рзЗржЯ ржУ ржХрзНрж▓рж┐рзЯрж╛рж░ (Memory/String Fill)
ржлрж╛ржВрж╢ржи	ржХрж╛ржЬ
memset(ptr, val, n)	ржорзЗржорзЛрж░рж┐рж░ n ржмрж╛ржЗржЯ val ржжрж┐рзЯрзЗ ржкрзВрж░ржг ржХрж░рзЗ
bzero(ptr, n)	ржорзЗржорзЛрж░рж┐рж░ n ржмрж╛ржЗржЯ 0 (рж╢рзВржирзНржп) ржХрж░рзЗ (ржкрзБрж░ржирзЛ, POSIX)

ЁЯУЛ рж╕рзНржЯрзНрж░рж┐ржВ ржХржкрж┐ (Memory)
ржлрж╛ржВрж╢ржи	ржХрж╛ржЬ
memcpy(dest, src, n)	src ржерзЗржХрзЗ n ржмрж╛ржЗржЯ dest ржП ржХржкрж┐ ржХрж░рзЗ
memmove(dest, src, n)	memcpy() ржПрж░ ржорждрзЛ, рждржмрзЗ overlapping рж╣рж▓рзЗ ржарж┐ржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ

ЁЯзо рж╕рзНржЯрзНрж░рж┐ржВ рждрзБрж▓ржирж╛ (Memory)
ржлрж╛ржВрж╢ржи	ржХрж╛ржЬ
memcmp(ptr1, ptr2, n)	ржжрзБржЗ ржорзЗржорзЛрж░рж┐ ржмрзНрж▓ржХ рждрзБрж▓ржирж╛ ржХрж░рзЗ, ржкрзНрж░ржержо n ржмрж╛ржЗржЯ


